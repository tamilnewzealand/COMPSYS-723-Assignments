module CruiseControl:

input On;
input Off;
input Resume;
input Set;
input QuickAccel;
input QuickDecel;
input Accel : float;
input Brake : float;
input Speed : float;

output CruiseSpeed : float;
output ThrottleCmd : float;
output CruiseState : integer;

signal state : integer in
	[loop
		present state then
			emit CruiseState(?state);
			end present;
			pause;
	end loop]
	||
	run CruiseControlController[ signal On/On1;
								 signal Off/Off1;
								 signal Resume/Resume1;
								 signal Accel/Accel1;
								 signal Brake/Brake1;
								 signal Speed/Speed1;
								 signal state/CruiseState ]
	||
	run CruiseSpeedManagement[ signal Set/Set2;
							   signal QuickDecel/QuickDecel2;
							   signal QuickAccel/QuickAccel2;
							   signal Accel/Accel2;
							   signal state/CruiseState2;
							   signal Speed/Speed2;
							   signal CruiseSpeed/CruiseSpeed2 ]
	||
	run ThrottleManagement[ signal Accel/Accel3;
							signal CruiseSpeed/CruiseSpeed3;
							signal state/CruiseState3;
							signal Speed/CurrentSpeed3;
							signal ThrottleCmd/ThrottleCmd3 ]
end signal

end module

module CruiseControlController:

constant PedalsMin : float;
constant SpeedMin : float;
constant SpeedMax : float;

input On1;
input Off1;
input Resume1;
input Accel1 : float;
input Brake1 : float;
input Speed1 : float;

output CruiseState : integer;

% OFF-1 ON-2 STDBY-3 DIS-4
var state := 1 : integer in
	loop
		emit CruiseState(state);
		pause;
		trap T2 in
			% OFF STATE LOGIC
			if state = 1 then
				present On1 then
					state := 2; exit T2;
				end present;
			end if;
			% ON STATE LOGIC
			if state = 2 then
				present Off1 then state := 1 end;
				if ?Accel1 > PedalsMin then
					state := 4; exit T2;
				end if;
				if ?Speed1 < SpeedMin then
					state := 4; exit T2;
				end if;
				if ?Speed1 > SpeedMax then
					state := 4; exit T2;
				end if;
				if ?Brake1 > PedalsMin then
					state := 3; exit T2;
				end if;
				exit T2;
			end if;
			% STANDBY STATE LOGIC
			if state = 3 then
				present Off1 then
					state := 1; exit T2;
				end present;
				present Resume1 then
					if ?Accel1 > PedalsMin then
						state := 4; exit T2;
					end if;
					if ?Speed1 < SpeedMin then
						state := 4; exit T2;
					end if;
					if ?Speed1 > SpeedMax then
						state := 4; exit T2;
					end if;
					if (?Speed1 > SpeedMin) and (?Speed1 < SpeedMax) then
						state := 2; exit T2;
					end if;
				end present;
				exit T2;
			end if;
			% DISABLE STATE LOGIC
			if state = 4 then
				present Off1 then
					state := 1; exit T2;
				end present;
				if (?Accel1 < PedalsMin) and (?Speed1 > SpeedMin) and (?Speed1 < SpeedMax) then
					state := 2; exit T2;
				end if;
				exit T2;
			end if;
		end trap
	end loop
end var
end module

module CruiseSpeedManagement:

constant SpeedMini : float;
constant SpeedMaxi : float;
constant SpeedInc : float;
constant Zero : float;

input Set2;
input QuickDecel2;
input QuickAccel2;
input Accel2 : float;
input CruiseState2 : integer;

output CruiseSpeed2 : float;
input Speed2 : float;

var CurrentSpeed := Zero : float in
	loop
		emit CruiseSpeed2(CurrentSpeed);
		pause;
		trap T3 in
			% OFF STATE LOGIC
			if ?CruiseState2 = 1 then
				CurrentSpeed := Zero;
				exit T3;
			% ALL OTHER STATES
			else
				present Set2 then
					CurrentSpeed := ?Speed2;
					exit T3;
				end present;
				present QuickAccel2 then
					if CurrentSpeed < SpeedMaxi then
						CurrentSpeed := CurrentSpeed + SpeedInc;
						exit T3;
					end if;
				end present;
				present QuickDecel2 then
					if CurrentSpeed > SpeedMini then
						CurrentSpeed := CurrentSpeed - SpeedInc;
						exit T3;
					end if;
				end present;
				% IF JUST SWITCHED TO ON STATE, LOAD CURRENT SPEED
				if ((?CruiseState2 = 2) and (pre(?CruiseState2) = 1)) then
					CurrentSpeed := ?Speed2;
					exit T3;
				end if;
				exit T3;
			end if;
		end trap
	end loop
end var
end module

module ThrottleManagement:

input Accel3 : float;
input CruiseSpeed3 : float;
input CruiseState3 : integer;
input CurrentSpeed3 : float;
output ThrottleCmd3 : float;

function regulateThrottle(integer, float, float) : float;

loop
	pause;
	trap T3 in
		% OFF STATE LOGIC
		if ?CruiseState3 = 0 then
			emit ThrottleCmd3(?Accel3);
			exit T3;
		% IF JUST SWITCHED TO ON STATE, LOAD CURRENT SPEED
		elsif ((?CruiseState3 = 0) and (pre(?CruiseState3) = 1)) then
			emit ThrottleCmd3(regulateThrottle(1, ?CruiseSpeed3, ?CurrentSpeed3));
			exit T3;
		% ALREADY IN ON STATE
		elsif ?CruiseState3 = 1 then
			emit ThrottleCmd3(regulateThrottle(0, ?CruiseSpeed3, ?CurrentSpeed3));
			exit T3;
		% IN STANDBY OR DISABLE BYPASS CRUISECONTROL
		else
			emit ThrottleCmd3(?Accel3);
			exit T3;
		end if;
	end trap
end loop
end module
